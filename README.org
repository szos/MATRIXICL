* Purpose 
  There are two main purposes
  1. to learn the clim protocol
  2. to create a GUI for :matrix-query
* Usage
  Clone this repository as well as =github.com/szos/matrix-query= to a location where quicklisp can see them. Once both ~:matrix-query~ and ~:matrixicl~ are in a place where quicklisp can find them, open up a repl and run

  #+begin_src common-lisp
  (ql:quickload :matrixicl)
  (matrixicl:app-main)
  #+end_src

  It is advisable to run this from emacs+slime, as the program is error prone at this point in time, and this will allow you to tackle errors much easier. 

  Once the frame is opened, you can login via the interactor or the menubar. after logging in the program will populate with the rooms you have joined. It does not currently populate banned or invited rooms. you can click on a room to view it, and you can click on an event within the room to inspect it. 
** Customization
   Matrixicl will look for an init file at =~/.matrixicl.d/init.lisp=. This file should begin with ~(in-package :matrixicl)~. Here you can define themes, set-themes, and in general customize the application. 
* IDEAS:
  the thing that made me stop working on this was that i couldnt find a nice way to compose and send a message. BUT now i know.  instead of a text editor pane or a interactor being used to compose a message, we use an application pane. we define everything in a closure holding the current message as a local/free variable. then we define a bunch of self insert commands which insert themselves into this pane, ie typing #\w would insert w, as well as push it into our current message list. when its time to send the message we can just reverse it and coerce it to a string and pass it off to the matrix framework thing for processing. The big thing here is that we would lose the interactor, as the interactor would no longer recieve our keypresses. but thats ok, as we could define a little switch character, such as #\, or #\ยฆ or #\ยง or whatever, which treates the current line/buffer as a command instead of a message... ok yeah this would def work! 
  We would have to put a ~(with-end-of-line-action (pane :wrap*)...)~ in the display function, but it would work!
